-- App: Customer Registration
-- Package: db.migrations
-- File: 01_customer_profile_tables.sql
-- Version: 0.1.0
-- Author: AI Agent
-- Date: 2025-10-27T19:19:41Z
-- Description: Creates normalized tables and supporting objects for the customer profile domain.

BEGIN;

CREATE SCHEMA IF NOT EXISTS customer_profile;

SET search_path TO customer_profile, public;

CREATE TABLE IF NOT EXISTS postal_address (
    address_id          INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    line1               VARCHAR(255) NOT NULL,
    line2               VARCHAR(255),
    city                VARCHAR(100) NOT NULL,
    state               VARCHAR(100) NOT NULL,
    postal_code         VARCHAR(20),
    country             CHAR(2) NOT NULL
);

CREATE TABLE IF NOT EXISTS privacy_settings (
    privacy_settings_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    marketing_emails_enabled BOOLEAN NOT NULL,
    two_factor_enabled       BOOLEAN NOT NULL
);

CREATE TABLE IF NOT EXISTS customer (
    customer_id         UUID PRIMARY KEY,
    first_name          VARCHAR(255) NOT NULL,
    middle_name         VARCHAR(255),
    last_name           VARCHAR(255) NOT NULL,
    address_id          INTEGER REFERENCES postal_address(address_id) ON DELETE SET NULL,
    privacy_settings_id INTEGER NOT NULL REFERENCES privacy_settings(privacy_settings_id)
);

CREATE INDEX IF NOT EXISTS idx_customer_address_id
    ON customer (address_id);

CREATE INDEX IF NOT EXISTS idx_customer_privacy_settings_id
    ON customer (privacy_settings_id);

CREATE TABLE IF NOT EXISTS customer_email (
    email_id     INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id  UUID NOT NULL REFERENCES customer(customer_id) ON DELETE CASCADE,
    email        VARCHAR(320) NOT NULL,
    created_at   TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (customer_id, email)
);

CREATE INDEX IF NOT EXISTS idx_customer_email_customer_id
    ON customer_email (customer_id);

CREATE TABLE IF NOT EXISTS customer_phone_number (
    phone_id     INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id  UUID NOT NULL REFERENCES customer(customer_id) ON DELETE CASCADE,
    type         VARCHAR(20) NOT NULL,
    number       VARCHAR(15) NOT NULL,
    UNIQUE (customer_id, number)
);

CREATE INDEX IF NOT EXISTS idx_customer_phone_customer_id
    ON customer_phone_number (customer_id);

CREATE OR REPLACE VIEW customer_profile_v AS
SELECT
    c.customer_id,
    c.first_name,
    c.middle_name,
    c.last_name,
    pa.line1,
    pa.line2,
    pa.city,
    pa.state,
    pa.postal_code,
    pa.country,
    ps.marketing_emails_enabled,
    ps.two_factor_enabled,
    ce.emails,
    cpn.phone_numbers
FROM customer c
LEFT JOIN postal_address pa ON pa.address_id = c.address_id
JOIN privacy_settings ps ON ps.privacy_settings_id = c.privacy_settings_id
LEFT JOIN LATERAL (
    SELECT STRING_AGG(ce.email, ', ' ORDER BY ce.email) AS emails
    FROM customer_email ce
    WHERE ce.customer_id = c.customer_id
) ce ON TRUE
LEFT JOIN LATERAL (
    SELECT STRING_AGG(
               CONCAT(cpn.type, ':', cpn.number),
               ', ' ORDER BY cpn.type, cpn.number
           ) AS phone_numbers
    FROM customer_phone_number cpn
    WHERE cpn.customer_id = c.customer_id
) cpn ON TRUE;

COMMIT;
