-- App: Customer Registration
-- Package: db
-- File: 01_customer_profile_tables.sql
-- Version: 0.1.0
-- Turns: 1
-- Author: AI Agent
-- Date: 2025-10-25T09:49:02Z
-- Exports: SQL migration statements
-- Description: Creates normalized tables, constraints, and indexes for the customer registration domain.

BEGIN;

CREATE SCHEMA IF NOT EXISTS customer_registration;

SET search_path TO customer_registration, public;

DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM pg_type t
        JOIN pg_namespace n ON t.typnamespace = n.oid
        WHERE t.typname = 'phone_number_type'
          AND n.nspname = current_schema()
    ) THEN
        EXECUTE 'CREATE TYPE phone_number_type AS ENUM (''mobile'', ''home'', ''work'', ''other'')';
    END IF;
END
$$;

CREATE TABLE IF NOT EXISTS postal_address (
    address_id     BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    line1          VARCHAR(255) NOT NULL,
    line2          VARCHAR(255),
    city           VARCHAR(100) NOT NULL,
    state          VARCHAR(100) NOT NULL,
    postal_code    VARCHAR(20),
    country        CHAR(2) NOT NULL,
    created_at     TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at     TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS privacy_settings (
    privacy_settings_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    marketing_emails_enabled BOOLEAN NOT NULL,
    two_factor_enabled       BOOLEAN NOT NULL,
    created_at               TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at               TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS customer (
    customer_id          UUID PRIMARY KEY,
    first_name           VARCHAR(255) NOT NULL,
    middle_name          VARCHAR(255),
    last_name            VARCHAR(255) NOT NULL,
    address_id           BIGINT REFERENCES postal_address(address_id) ON DELETE SET NULL,
    privacy_settings_id  BIGINT NOT NULL REFERENCES privacy_settings(privacy_settings_id) ON DELETE RESTRICT,
    created_at           TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at           TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_customer_address_id
    ON customer (address_id);

CREATE INDEX IF NOT EXISTS idx_customer_privacy_settings_id
    ON customer (privacy_settings_id);

CREATE TABLE IF NOT EXISTS customer_email (
    customer_email_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id       UUID NOT NULL REFERENCES customer(customer_id) ON DELETE CASCADE,
    email             VARCHAR(320) NOT NULL,
    created_at        TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at        TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    UNIQUE (customer_id, email)
);

CREATE INDEX IF NOT EXISTS idx_customer_email_customer_id
    ON customer_email (customer_id);

CREATE INDEX IF NOT EXISTS idx_customer_email_email
    ON customer_email (email);

CREATE TABLE IF NOT EXISTS customer_phone_number (
    customer_phone_number_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id              UUID NOT NULL REFERENCES customer(customer_id) ON DELETE CASCADE,
    phone_type               phone_number_type NOT NULL,
    phone_number             VARCHAR(20) NOT NULL,
    created_at               TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at               TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    UNIQUE (customer_id, phone_number)
);

CREATE INDEX IF NOT EXISTS idx_customer_phone_number_customer_id
    ON customer_phone_number (customer_id);

CREATE INDEX IF NOT EXISTS idx_customer_phone_number_type
    ON customer_phone_number (phone_type);

CREATE OR REPLACE VIEW customer_overview AS
SELECT
    c.customer_id,
    c.first_name,
    c.middle_name,
    c.last_name,
    pa.line1 AS address_line1,
    pa.line2 AS address_line2,
    pa.city AS address_city,
    pa.state AS address_state,
    pa.postal_code AS address_postal_code,
    pa.country AS address_country,
    ps.marketing_emails_enabled,
    ps.two_factor_enabled,
    COALESCE(array_agg(DISTINCT ce.email) FILTER (WHERE ce.email IS NOT NULL), ARRAY[]::VARCHAR[]) AS emails,
    COALESCE(array_agg(DISTINCT cp.phone_number) FILTER (WHERE cp.phone_number IS NOT NULL), ARRAY[]::VARCHAR[]) AS phone_numbers
FROM customer c
    LEFT JOIN postal_address pa ON pa.address_id = c.address_id
    LEFT JOIN privacy_settings ps ON ps.privacy_settings_id = c.privacy_settings_id
    LEFT JOIN customer_email ce ON ce.customer_id = c.customer_id
    LEFT JOIN customer_phone_number cp ON cp.customer_id = c.customer_id
GROUP BY
    c.customer_id,
    c.first_name,
    c.middle_name,
    c.last_name,
    pa.line1,
    pa.line2,
    pa.city,
    pa.state,
    pa.postal_code,
    pa.country,
    ps.marketing_emails_enabled,
    ps.two_factor_enabled;

COMMIT;

